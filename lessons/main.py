# СПИСКИ

# list1 = () #создание пустого списка
# list2 = list() #создание пустого списка
# list1 = [1, 4, 5, 3, 7]
# print(list1[0]) # 1


# list1 = [1, 4, 5, 3, 7] #выводит список поэлементно
# for i in list1:
#     print(i)
# print(len(list1)) 


# list = [1, 2]
# print(list)
# list.append(5) #добавляет в конец списка 8
# print(list)

# list = [] # программа которая каждую итеррацию добавляет элемент в путой список от 0 до 4
# for i in range(5):
#     list.append(i) #добавляет элемент в конец списка
#     print(list)
# print(list)


# list = [1, 5, 7, 3, 8, 2]
# print(list)
# a = list.pop() #присваиваем последний удаленный элемент переменной
# print(list.pop()) # удаляет последний элмент из списка
# print(list)
# print(a)

# удаление конкретного элемента списка
# list = [2, 5, 7, 12, 0, 1]
# print(list.pop(0)) #удаляет 1 элемент списка 

# добавление элемента на нужную позицию
# list = [2, 5, 7, 12, 0, 1]
# list.insert(0, 11) #добавили на первую позицию 11
# print(list)

# СРЕЗЫ СПИСКОВ

# list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# print(list[0]) #выводит первый элемент списка
# print(list[len(list)-1]) #выводит последний элемент списка
# print(list[-5]) #выводит 5 элемент с конца
# print(list[:]) #срез. выводит весь список
# print(list[:2]) #срез. выводит список сначала до 2 элемента
# print(list[len(list)-2:]) #срез. выводит 2 последних элемента списка
# print(list[2:9]) #срез. выводит список со 2 по 9 элементы
# print(list[0:len(list):6]) #срез. выводит список сначал до конца с шагом 6
# print(list[::6]) #срез. выводит список сначал до конца с шагом 6

# КОРТЕЖИ
# неизменяемые списки

# t = () # создания пустого кортежа
# v = [1, 2, 3,]
# print(type(v)) # класс list список
# print(v)
# v = tuple(v) # переводим список в кортеж, тип tuple
# print(type(v)) # класс tuple кортеж
# print(v)


# a,b,c = v #множественное присваивание
# print(a,b,c) #распаковка нашего кортежа


# t = (1, 2, 3, 4, 5,) # в списке обязательна "," в конце каждого элемента
# for i in t:
#     print(i) #выводит элементы кортежа по порядку

# t = (1, 2, 3, 4, 5,) # в списке обязательна "," в конце каждого элемента
# for i in range(len(t)):
#     print(t[i]) #выводит элементы кортежа по порядку
    

# СЛОВАРИ
# неупорядоченные коллекции произвольных объектов с доступом по ключу

# d = {} # создание пустого словаря
# d = dict() # создание пустого словаря

# d['q'] = 'qwerty' #ключ 'q' и его значение 'qwerty'
# print(d)
# print(type(d)) # class dict

# d['w'] = 'werty' #ключ 'q' и его значение 'qwerty'
# print(d)
# print(d['q']) # выводит значение ключа q - qwerty


# dictonary = {} # создали пустой словарь
# dictonary = {'up': '<-', 'left': '|', 'right': '->'} # заполнили ключами и значениями
# print(dictonary['up']) #вывели по ключу up значение <-

# del dictonary ['left'] #удаление по ключу
# print(dictonary)


# dictonary = {'up': '<-', 'left': '|', 'right': '->'}
# for item in dictonary:
#     #print(item) # выводит только ключи: up, left, right
#     print('{}:{}' .format(item, dictonary[item])) #обращаемся к словарю и выводим ключ и значение

# dictonary = {'up': '<-', 'left': '|', 'right': '->'}
# for (a, b) in dictonary.items(): # проходимся по нашему словарю, где А это ключ, а Б значение
#     print(a, b) #обращаемся к словарю и выводим ключ и значение


# МНОЖЕСТВА
# множества содержат в себе уникальные элементы, не обязательно упорядоченные, они не могут повторяться, и находиться в хаотичном порядке

# color = {'red', 'black', 'green'} # создали множество
# print(color)

# color.add('blue') # добавляет значение в мноество, добавляет в хаотичном порядке
# print(color)

# color.remove('red') # удаляет элемент из множества
# print(color)

# color.discard('red') # если это значение есть в множестве, то тогда удаляет, ели нет, то пропускает
# print(color)

# color.clear() #удаляем полностью все значения множества
# print(color) # получаем пустое множество set()

# d = set() # создаем пустое множество
# print(d)


# операции со множествами
# a = {1, 2, 3, 4, 5}
# b = {3, 1, 7, 87, 23}
# c = a.copy() # c = {1, 2, 3, 4, 5} копирует множество в новую переменную
# u = a.union(b) # u = {1, 2, 3, 4, 5, 7, 87, 23} объединяет 2 множества в одну переменную
# i = a.intersection(b) # i = {1, 3} присваивает переменной повторяющиеся значения множеств
# dl = a.difference(b) # dl = {2, 4, 5} вычитаем из значения А значение Б
# da = b.difference(a) # da = {2, 4, 5} вычитаем из значения Б значение А
# q = a.union(b).difference(a.intersection(b)) # q = {2, 4, 5, 7, 23, 87}
# print(q)


#замороженное множество
# a = {1, 3, 5}
# b = frozenset(a) # замороженное множество. множество которое мы не можем менять 
# print(b) #frozenset({1, 3, 5})


# Генератор Списков List Comprehension

# list = []
# list = ['non' for item in range(5)] # 5 раз добавляем в список слово 'non'
# print(list) #['non', 'non', 'non', 'non', 'non']

# for i in range(5): # 5 раз добавляем в список слово 'non'
#     list[i] = 'non'
# print(list) #['non', 'non', 'non', 'non', 'non']


# создать список, состоящих из чисел от 1 до 100
# list = []
# for i in range(1, 101):
#     list.append(i)
# print(list)

# list = [i for i in range(1, 101)]
# print(list)

# создать список, состоящих из четных чисел от 1 до 100
# list = []
# for i in range(1, 101):
#     if i % 2 == 0:
#         list.append(i)
# print(list)

# list = [i for i in range(1, 101) if i % 2 == 0]
# print(list)

# list = [(i, i) for i in range(1, 101) if i % 2 == 0] # выводит пары кортежи (2, 2), (3, 3)...
# print(list)


# ПРОФИЛИРОВАНИЕ И ОТЛАДКА

# 1. SyntaxError - Синтаксическая ошибка
# 2. IndentationError - Ошибка отступов
# 3. TypeError - Типовая ошибка
# 4. ZeroDivisionError - Деление на 0
# 5. KeyError - Оибка ключа
# 6. NameError - Ошибка имени переменной
# 7. ValueError - Ошибка значения

#также можно умножать, делить складывать и вычитать
# list = [(i + 2) for i in range(0, 101) if i % 2 == 0] # выводит [2, 4, 6, 8...]
# print(list)

