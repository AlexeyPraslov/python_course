# Задача
# в списке хранятся числа. Нужно выбрать только четные числа и составить список пар
# пример: 1 2 3 5 8 15 23 38
# плучить: [(2,4), (8,64), (38,1444)]

# lst = [1, 2, 3, 5, 8, 15, 23, 38]
# lst2 = []
# for i in lst:
#     if i % 2 == 0:
#         lst2.append((i, i*i))      
# print(lst2)
# используем лямбда функцию

# def select(func, lst):
#     return[func(x) for x in lst] #возвращает список в котором мы к каждому элементу применили функцию func

# def where(func, col):
#     return[x for x in col if func(x)] # возвращает значения которые прошли проверку func от X

# lst = [1, 2, 3, 5, 8, 15, 23, 38]
# res = select(int, lst)
# print(res)
# res = where(lambda x: x % 2 == 0, res)
# print(res)
# res = list(select(lambda x: (x, x**2), res))
# print(res)


#####################################################################
# рассмотрим функцию map

# lst = [x for x in range(1, 20)] # генератор списка от 1 до 20
# print(lst)

# lst = list(map(lambda x: x + 10, lst)) #функция map: передаем в нее два значения: функция которую мы передаем к каждому объекту (lambda x: x + 10) и спискок к которму мы это будем применять
# print(lst)


#####################################################################
# Задача
# с клавиатуры вводится набор чисел, в качестве разделителя используется пробел. этот набор чисел будет считан в качестве строки. 
# как превратить list строк в list чисел?

# data = '12 156 43 3 5 90 43 1 67'
# print(data)

# data = list(map(int, data.split()))
# print(data)


######################################################################
#функция filter
# на вход принимает два аргумента: сама функция и объект. возвращает только те елементы объекта, которые true

# data = [15, 36, 9, 175, 4, 65]
# #делаем выборку, возращаем только те числа, которые оканчиваются на 5
# data = list(filter(lambda x: x % 10 == 5, data))
# print(data)

######################################################################
# функция zip
# Функция zip() применяется к набору итерируемых объектов и возвращает итератор с кортежами из элементов входных данных
# На выходе получаем набор данных, состоящий из элементов соответствующих исходному набору.

# zip([1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f'])
# #на выходе
# [(1, 'b', 'e'), (2, 'b', 'e'), (3, 'c', 'f')]



# Пример:
# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# data = list(zip(users, ids))
# print(data) # [('user1', 4), ('user2', 5), ('user3', 9), ('user4', 14), ('user5', 7)]

# Функция zip () пробегает по минимальному входящему набору:

# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# salary = [111, 222, 333]
# data = list(zip(users, ids, salary))
# print(data) # [('user1', 4, 111), ('user2', 5, 222), ('user3', 333)]

#####################################################################
# Функция enumerate
# Функция enumerate() применяется к итерируемому объекту и возвращает новый итератор с кортежами из индекса и элементов входных данных.

# enumerate(['казань', 'москва', 'котлас', 'ташкент'])
# [(0, 'казань'), (1, 'москва'), (2, 'котлас'), (3, 'ташкент')]

# Функция enumerate() позволяет пронумеровать набор данных.
# users = ['user1', 'user2', 'user3']
# data = list(enumerate(users))
# print(data) # [(0, 'user1'), (1, 'user2'), (2, 'user3))]


####################################################################
# Файлы
# Файлы в текстовом формате используются для:
# ● Хранения данных
# ● Передачи данных в клиент-серверных проектах
# ● Хранения конфигов
# ● Логирования действий
# Что нужно для работы с файлами:
# 1. Завести переменную, которая будет связана с этим текстовым файлом.
# 2. Указать путь к файлу.
# 3. Указать, в каком режиме мы будем работать с файлом.

# Файлы
# Варианты режима (мод):
# a – открытие для добавления данных.
# ○ Позволяет дописывать что-то в имеющийся файл.
# ○ Если вы попробуете дописать что-то в несуществующий файл, то файл будет создан
# и в него начнется запись.
# r – открытие для чтения данных.
# ○ Позволяет читать данные из файла.
# ○ Если вы попробуете считать данные из файла, которого не существует, программа
# выдаст ошибку.
# w – открытие для записи данных.
# ○ Позволяет записывать данные и создавать файл, если его не существует

# Файлы
# Миксованные режимы:
# 1. w+
# ○ Позволяет открывать файл для записи и читать из него.
# ○ Если файла не существует, он будет создан.
# 2. r+
# ○ Позволяет открывать файл для чтения и дописывать в него.
# ○ Если файла не существует, программа выдаст ошибку.

# Файлы
# Примеры использования различных режимов в коде:
# 1. Режим a
#  colors = ['red', 'green', 'blue']
#  data = open('file.txt', 'a') # здесь указываем режим, в котором будем работать
#  data.writelines(colors) # разделителей не будет
#  data.close()
# ● data.close() — используется для закрытия файла, чтобы разорвать подключение файловой
# переменной с файлом на диске.
# ● exit() — позволяет не выполнять код, прописанный после этой команды в скрипте.
# ● В итоге создаётся текстовый файл с текстом внутри: redbluedreen.
# ● При повторном выполнении скрипта redbluedreenredbluedreen — добавление в
# существующий файл, а не перезапись файлов.

# Файлы
# Ещё один способ записи данных в файл:
# with open('file.txt', 'w') as data:
#  data.write('line 1\n')
#  data.write('line 2\n')
# 2. Режим r
# ● Чтение данных из файла:
#  path = 'file.txt'
#  data = open(path, 'r')
#  for line in data:
#  print(line)
#  data.close()

# Файлы
# 3. Режим w
#  colors = ['red', 'green', 'blue']
#  data = open('file.txt', 'w')
#  data.writelines(colors) # разделителей не будет
# data.close()
# ● В итоге создаётся текстовый файл с текстом внутри: ‘redbluedreen’.
# ● В случае перезаписи новые данные записываются, а старые удаляются.


#####################################################################
# Модуль os
# ● os.path - является вложенным модулем в модуль os и реализует некоторые полезные функции для работы с
# путями, такие как:
# ○ os.path.basename(path) - базовое имя пути
# import os
# print(os.path.basename('C:/Users/79190/PycharmProjects/webproject/main.py')) #'main.py'
# ● os.path.abspath(path) - возвращает нормализованный абсолютный путь.
# import os
# print(os.path.abspath('main.py')) # 'C:/Users/79190/PycharmProjects/webproject/main.py'
# Это лишь малая часть возможностей модуля os.



# Модуль shutil
# Модуль shutil содержит набор функций высокого уровня для обработки файлов, групп файлов, и папок. В частности,
# доступные здесь функции позволяют копировать, перемещать и удалять файлы и папки. Часто используется вместе
# с модулем os.
# Для того, чтобы начать работать с данным модулем необходимо его импортировать в свою программу:
# import shutil
# Познакомимся с базовыми функциями данного модуля:
# ● shutil.copyfile(src, dst) - копирует содержимое (но не метаданные) файла src в файл dst.
# ● shutil.copy(src, dst) - копирует содержимое файла src в файл или папку dst.
# ● shutil.rmtree(path) - Удаляет текущую директорию и все поддиректории; path должен указывать на
# директорию, а не на символическую ссылку.